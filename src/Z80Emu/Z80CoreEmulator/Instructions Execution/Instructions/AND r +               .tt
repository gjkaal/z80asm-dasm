<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

using System;

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# var operators = new Dictionary<string, string> {{"AND","&"}, {"XOR","^"}, {"OR","|"}};
   foreach(var reg in new[] {"A","B","C","D","E","H","L","(HL)","n","IXH","IXL","IYH","IYL","(IX+n)","(IY+n)"}) {
   foreach(var instrName in operators.Keys) { 
		var isIndexReg = (reg.StartsWith("I") && reg.Length==3);
        var isMem = (reg.StartsWith("("));#>
        /// The <#=instrName #> <#=reg #> instruction.
		/// </summary>
		private byte <#=instrName#>_<#=MethodRegPartName(reg)#>()
		{
<# ReadOffset(reg); #>
<# if(reg=="n") { #>
			var argument = ProcessorAgent.FetchNextOpcode();
<# } #>
            FetchFinished();

            var oldValue = Registers.A;
<# if(isMem) { #>
<# GetAddressFromReg(reg); #>
		var argument = ProcessorAgent.ReadFromMemory(address);
<# } else if(reg!="n") { #>
            var argument = Registers.<#=reg#>;
<# } #>
			var newValue = (byte)(oldValue <#=operators[instrName]#> argument);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = (newValue == 0);
            Registers.HF = <#=instrName == "AND" ? 1 : 0#>;
            Registers.PF = Parity[newValue];
            Registers.NF = 0;
			Registers.CF = 0;
            SetFlags3and5From(newValue);

            return <#=reg=="(HL)" || reg=="n" ? 7 : isMem ? 19 : isIndexReg ? 8 : 4#>;
        }

<# }} #>
    }
}