<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning(); #>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach (var src in new[] {"BC", "DE", "HL", "SP"}) {
   for(int op=0; op<=1; op++)
   {
       var isAdd = op == 0;
       var opToUse = isAdd ? "+" : "-";
       var instrName = isAdd ? "ADC" : "SBC"; #>
        /// <summary>
        /// The <#=instrName#> HL,<#=src #> instruction
        /// </summary>
        byte <#=instrName#>_HL_<#=src #>()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.<#=src #>;
			var newValueInt = (ushort)oldValue <#=opToUse#> (ushort)valueToAdd <#=opToUse#> Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = (newValue == 0);
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = (newValueInt & 0x10000);
			Registers.PF = (oldValue ^ valueToAdd<#= isAdd ? " ^ 0x8000" : ""#>) & (<#= isAdd ? "valueToAdd" : "oldValue"#> ^ newValue) & 0x8000;

            Registers.NF = <#=op#>;
            Registers.SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

<# }} #>
    }
}
