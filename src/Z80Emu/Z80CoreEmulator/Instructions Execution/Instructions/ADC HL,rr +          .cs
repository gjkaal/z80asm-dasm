// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADC HL,rr +          .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADC HL,BC instruction
        /// </summary>
        private byte ADC_HL_BC()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.BC;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd + Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The SBC HL,BC instruction
        /// </summary>
        private byte SBC_HL_BC()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.BC;
            var newValueInt = (ushort)oldValue - (ushort)valueToAdd - Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

            Registers.NF = 1;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADC HL,DE instruction
        /// </summary>
        private byte ADC_HL_DE()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.DE;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd + Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The SBC HL,DE instruction
        /// </summary>
        private byte SBC_HL_DE()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.DE;
            var newValueInt = (ushort)oldValue - (ushort)valueToAdd - Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

            Registers.NF = 1;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADC HL,HL instruction
        /// </summary>
        private byte ADC_HL_HL()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.HL;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd + Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The SBC HL,HL instruction
        /// </summary>
        private byte SBC_HL_HL()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.HL;
            var newValueInt = (ushort)oldValue - (ushort)valueToAdd - Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

            Registers.NF = 1;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADC HL,SP instruction
        /// </summary>
        private byte ADC_HL_SP()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.SP;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd + Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The SBC HL,SP instruction
        /// </summary>
        private byte SBC_HL_SP()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.SP;
            var newValueInt = (ushort)oldValue - (ushort)valueToAdd - Registers.CF;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.SF = newValue & 0x8000;
            Registers.ZF = newValue == 0;
            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

            Registers.NF = 1;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }
    }
}