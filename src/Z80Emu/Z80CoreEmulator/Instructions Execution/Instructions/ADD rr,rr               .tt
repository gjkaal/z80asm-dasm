<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var pair in new[] {"HL.BC","HL.DE","HL.HL","HL.SP","IX.BC","IX.DE","IX.IX","IX.SP","IY.BC","IY.DE","IY.IY","IY.SP"}) {
        var parts = pair.Split('.');
        var dest = parts[0];
        var src = parts[1];
        var high = dest == "HL" ? "H" : dest + "H"; #>
        /// <summary>
        /// The ADD <#=dest#>,<#=src#> instruction
        /// </summary>
        byte ADD_<#=dest#>_<#=src#>()
        {
            FetchFinished();

			var oldValue = Registers.<#=dest#>;
			var valueToAdd = Registers.<#=src #>;
			var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
			Registers.<#=dest#> = newValue;

			Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = (newValueInt & 0x10000);
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue.GetHighByte());

            return <#=IfIndexRegister(dest, 15, @else: 11)#>;
        }

<# } #>
    }
}
