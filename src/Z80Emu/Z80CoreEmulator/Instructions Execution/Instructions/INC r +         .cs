// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "INC r +         .tt" instead.

using System;

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The INC A instruction.
        /// </summary>
        private byte INC_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)(oldValue + 1);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC A instruction.
        /// </summary>
        private byte DEC_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)(oldValue - 1);
            Registers.A = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC B instruction.
        /// </summary>
        private byte INC_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)(oldValue + 1);
            Registers.B = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC B instruction.
        /// </summary>
        private byte DEC_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)(oldValue - 1);
            Registers.B = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC C instruction.
        /// </summary>
        private byte INC_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)(oldValue + 1);
            Registers.C = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC C instruction.
        /// </summary>
        private byte DEC_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)(oldValue - 1);
            Registers.C = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC D instruction.
        /// </summary>
        private byte INC_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)(oldValue + 1);
            Registers.D = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC D instruction.
        /// </summary>
        private byte DEC_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)(oldValue - 1);
            Registers.D = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC E instruction.
        /// </summary>
        private byte INC_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)(oldValue + 1);
            Registers.E = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC E instruction.
        /// </summary>
        private byte DEC_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)(oldValue - 1);
            Registers.E = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC H instruction.
        /// </summary>
        private byte INC_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)(oldValue + 1);
            Registers.H = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC H instruction.
        /// </summary>
        private byte DEC_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)(oldValue - 1);
            Registers.H = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC L instruction.
        /// </summary>
        private byte INC_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)(oldValue + 1);
            Registers.L = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The DEC L instruction.
        /// </summary>
        private byte DEC_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)(oldValue - 1);
            Registers.L = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 4;
        }

        /// <summary>
        /// The INC IXH instruction.
        /// </summary>
        private byte INC_IXH()
        {
            FetchFinished();

            var oldValue = Registers.IXH;
            var newValue = (byte)(oldValue + 1);
            Registers.IXH = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The DEC IXH instruction.
        /// </summary>
        private byte DEC_IXH()
        {
            FetchFinished();

            var oldValue = Registers.IXH;
            var newValue = (byte)(oldValue - 1);
            Registers.IXH = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The INC IXL instruction.
        /// </summary>
        private byte INC_IXL()
        {
            FetchFinished();

            var oldValue = Registers.IXL;
            var newValue = (byte)(oldValue + 1);
            Registers.IXL = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The DEC IXL instruction.
        /// </summary>
        private byte DEC_IXL()
        {
            FetchFinished();

            var oldValue = Registers.IXL;
            var newValue = (byte)(oldValue - 1);
            Registers.IXL = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The INC IYH instruction.
        /// </summary>
        private byte INC_IYH()
        {
            FetchFinished();

            var oldValue = Registers.IYH;
            var newValue = (byte)(oldValue + 1);
            Registers.IYH = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The DEC IYH instruction.
        /// </summary>
        private byte DEC_IYH()
        {
            FetchFinished();

            var oldValue = Registers.IYH;
            var newValue = (byte)(oldValue - 1);
            Registers.IYH = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The INC IYL instruction.
        /// </summary>
        private byte INC_IYL()
        {
            FetchFinished();

            var oldValue = Registers.IYL;
            var newValue = (byte)(oldValue + 1);
            Registers.IYL = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The DEC IYL instruction.
        /// </summary>
        private byte DEC_IYL()
        {
            FetchFinished();

            var oldValue = Registers.IYL;
            var newValue = (byte)(oldValue - 1);
            Registers.IYL = newValue;

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 8;
        }

        /// <summary>
        /// The INC (HL) instruction.
        /// </summary>
        private byte INC_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue + 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 11;
        }

        /// <summary>
        /// The DEC (HL) instruction.
        /// </summary>
        private byte DEC_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue - 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 11;
        }

        /// <summary>
        /// The INC (IX+n) instruction.
        /// </summary>
        private byte INC_aIX_plus_n()
        {
            var offset = processorAgent.FetchNextOpcode();
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue + 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 23;
        }

        /// <summary>
        /// The DEC (IX+n) instruction.
        /// </summary>
        private byte DEC_aIX_plus_n()
        {
            var offset = processorAgent.FetchNextOpcode();
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue - 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 23;
        }

        /// <summary>
        /// The INC (IY+n) instruction.
        /// </summary>
        private byte INC_aIY_plus_n()
        {
            var offset = processorAgent.FetchNextOpcode();
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue + 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x00;
            Registers.PF = newValue == 0x80;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);

            return 23;
        }

        /// <summary>
        /// The DEC (IY+n) instruction.
        /// </summary>
        private byte DEC_aIY_plus_n()
        {
            var offset = processorAgent.FetchNextOpcode();
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue - 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.HF = (newValue & 0x0F) == 0x0F;
            Registers.PF = newValue == 0x7F;
            Registers.NF = 1;
            Registers.SetFlags3and5From(newValue);

            return 23;
        }
    }
}