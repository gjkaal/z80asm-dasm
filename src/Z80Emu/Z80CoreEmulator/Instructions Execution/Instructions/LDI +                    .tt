<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# var instructions = new[] {"LDI", "LDD", "LDIR", "LDDR"};
    for (int i = 0; i < 4; i++)
    {
        var instr = instructions[i];
        var incBC = (i == 0 || i == 2);
		var repeat = (i == 2 || i == 3); #>
        /// <summary>
        /// The <#=instr#> instruction.
        /// </summary>
        byte <#=instr#>()
        {
            FetchFinished();

            var sourceAddress = Registers.HL;
            var destAddress = Registers.DE;
            var counter = Registers.BC;
            var value = ProcessorAgent.ReadFromMemory((ushort)sourceAddress);
            ProcessorAgent.WriteToMemory((ushort)destAddress, value);

            Registers.HL = (short)(sourceAddress<#= incBC ? " + 1" : " - 1"#>);
            Registers.DE = (short)(destAddress<#= incBC ? " + 1" : " - 1"#>);
            counter--;
            Registers.BC = counter;

            Registers.HF = 0;
            Registers.NF = 0;
            Registers.PF = (counter != 0);

            var valuePlusA = (byte)(value + Registers.A);
            Registers.Flag3 = valuePlusA.GetBit(3);
            Registers.Flag5 = valuePlusA.GetBit(1);

<# if(repeat) { #>
			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}
<# } #>

	        return 16;
		}

<# } #>
	}
}
