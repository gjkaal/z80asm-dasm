// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "RLCA +             .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The RLC A instruction
        /// </summary>
        private byte RLC_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC B instruction
        /// </summary>
        private byte RLC_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC C instruction
        /// </summary>
        private byte RLC_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC D instruction
        /// </summary>
        private byte RLC_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC E instruction
        /// </summary>
        private byte RLC_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC H instruction
        /// </summary>
        private byte RLC_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC L instruction
        /// </summary>
        private byte RLC_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RLC (HL) instruction
        /// </summary>
        private byte RLC_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The RLCA instruction
        /// </summary>
        private byte RLCA()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            return 4;
        }

        /// <summary>
        /// The RLC (IX+n),A instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),B instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),C instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),D instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),E instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),H instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n),L instruction
        /// </summary>
        private byte RLC_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IX+n) instruction
        /// </summary>
        private byte RLC_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),A instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),B instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),C instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),D instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),E instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),H instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n),L instruction
        /// </summary>
        private byte RLC_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RLC (IY+n) instruction
        /// </summary>
        private byte RLC_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC A instruction
        /// </summary>
        private byte RRC_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC B instruction
        /// </summary>
        private byte RRC_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC C instruction
        /// </summary>
        private byte RRC_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC D instruction
        /// </summary>
        private byte RRC_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC E instruction
        /// </summary>
        private byte RRC_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC H instruction
        /// </summary>
        private byte RRC_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC L instruction
        /// </summary>
        private byte RRC_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RRC (HL) instruction
        /// </summary>
        private byte RRC_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The RRCA instruction
        /// </summary>
        private byte RRCA()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            return 4;
        }

        /// <summary>
        /// The RRC (IX+n),A instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),B instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),C instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),D instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),E instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),H instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n),L instruction
        /// </summary>
        private byte RRC_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IX+n) instruction
        /// </summary>
        private byte RRC_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),A instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),B instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),C instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),D instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),E instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),H instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n),L instruction
        /// </summary>
        private byte RRC_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RRC (IY+n) instruction
        /// </summary>
        private byte RRC_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL A instruction
        /// </summary>
        private byte RL_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL B instruction
        /// </summary>
        private byte RL_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL C instruction
        /// </summary>
        private byte RL_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL D instruction
        /// </summary>
        private byte RL_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL E instruction
        /// </summary>
        private byte RL_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL H instruction
        /// </summary>
        private byte RL_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL L instruction
        /// </summary>
        private byte RL_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RL (HL) instruction
        /// </summary>
        private byte RL_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The RLA instruction
        /// </summary>
        private byte RLA()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            return 4;
        }

        /// <summary>
        /// The RL (IX+n),A instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),B instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),C instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),D instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),E instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),H instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n),L instruction
        /// </summary>
        private byte RL_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IX+n) instruction
        /// </summary>
        private byte RL_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),A instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),B instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),C instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),D instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),E instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),H instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n),L instruction
        /// </summary>
        private byte RL_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RL (IY+n) instruction
        /// </summary>
        private byte RL_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | (byte)Registers.CF);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR A instruction
        /// </summary>
        private byte RR_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR B instruction
        /// </summary>
        private byte RR_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR C instruction
        /// </summary>
        private byte RR_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR D instruction
        /// </summary>
        private byte RR_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR E instruction
        /// </summary>
        private byte RR_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR H instruction
        /// </summary>
        private byte RR_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR L instruction
        /// </summary>
        private byte RR_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The RR (HL) instruction
        /// </summary>
        private byte RR_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The RRA instruction
        /// </summary>
        private byte RRA()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            return 4;
        }

        /// <summary>
        /// The RR (IX+n),A instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),B instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),C instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),D instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),E instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),H instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n),L instruction
        /// </summary>
        private byte RR_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IX+n) instruction
        /// </summary>
        private byte RR_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),A instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),B instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),C instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),D instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),E instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),H instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n),L instruction
        /// </summary>
        private byte RR_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The RR (IY+n) instruction
        /// </summary>
        private byte RR_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (Registers.CF ? 0x80 : 0));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA A instruction
        /// </summary>
        private byte SLA_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)(oldValue << 1);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA B instruction
        /// </summary>
        private byte SLA_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)(oldValue << 1);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA C instruction
        /// </summary>
        private byte SLA_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)(oldValue << 1);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA D instruction
        /// </summary>
        private byte SLA_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)(oldValue << 1);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA E instruction
        /// </summary>
        private byte SLA_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)(oldValue << 1);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA H instruction
        /// </summary>
        private byte SLA_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)(oldValue << 1);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA L instruction
        /// </summary>
        private byte SLA_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)(oldValue << 1);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLA (HL) instruction
        /// </summary>
        private byte SLA_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The SLA (IX+n),A instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),B instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),C instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),D instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),E instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),H instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n),L instruction
        /// </summary>
        private byte SLA_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IX+n) instruction
        /// </summary>
        private byte SLA_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),A instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),B instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),C instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),D instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),E instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),H instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n),L instruction
        /// </summary>
        private byte SLA_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLA (IY+n) instruction
        /// </summary>
        private byte SLA_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue << 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA A instruction
        /// </summary>
        private byte SRA_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA B instruction
        /// </summary>
        private byte SRA_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA C instruction
        /// </summary>
        private byte SRA_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA D instruction
        /// </summary>
        private byte SRA_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA E instruction
        /// </summary>
        private byte SRA_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA H instruction
        /// </summary>
        private byte SRA_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA L instruction
        /// </summary>
        private byte SRA_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRA (HL) instruction
        /// </summary>
        private byte SRA_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The SRA (IX+n),A instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),B instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),C instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),D instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),E instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),H instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n),L instruction
        /// </summary>
        private byte SRA_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IX+n) instruction
        /// </summary>
        private byte SRA_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),A instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),B instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),C instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),D instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),E instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),H instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n),L instruction
        /// </summary>
        private byte SRA_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRA (IY+n) instruction
        /// </summary>
        private byte SRA_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL A instruction
        /// </summary>
        private byte SLL_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL B instruction
        /// </summary>
        private byte SLL_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL C instruction
        /// </summary>
        private byte SLL_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL D instruction
        /// </summary>
        private byte SLL_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL E instruction
        /// </summary>
        private byte SLL_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL H instruction
        /// </summary>
        private byte SLL_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL L instruction
        /// </summary>
        private byte SLL_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)((oldValue << 1) | 1);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SLL (HL) instruction
        /// </summary>
        private byte SLL_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The SLL (IX+n),A instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),B instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),C instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),D instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),E instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),H instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n),L instruction
        /// </summary>
        private byte SLL_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IX+n) instruction
        /// </summary>
        private byte SLL_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),A instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),B instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),C instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),D instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),E instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),H instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n),L instruction
        /// </summary>
        private byte SLL_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SLL (IY+n) instruction
        /// </summary>
        private byte SLL_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)((oldValue << 1) | 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(7);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL A instruction
        /// </summary>
        private byte SRL_A()
        {
            FetchFinished();

            var oldValue = Registers.A;
            var newValue = (byte)(oldValue >> 1);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL B instruction
        /// </summary>
        private byte SRL_B()
        {
            FetchFinished();

            var oldValue = Registers.B;
            var newValue = (byte)(oldValue >> 1);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL C instruction
        /// </summary>
        private byte SRL_C()
        {
            FetchFinished();

            var oldValue = Registers.C;
            var newValue = (byte)(oldValue >> 1);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL D instruction
        /// </summary>
        private byte SRL_D()
        {
            FetchFinished();

            var oldValue = Registers.D;
            var newValue = (byte)(oldValue >> 1);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL E instruction
        /// </summary>
        private byte SRL_E()
        {
            FetchFinished();

            var oldValue = Registers.E;
            var newValue = (byte)(oldValue >> 1);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL H instruction
        /// </summary>
        private byte SRL_H()
        {
            FetchFinished();

            var oldValue = Registers.H;
            var newValue = (byte)(oldValue >> 1);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL L instruction
        /// </summary>
        private byte SRL_L()
        {
            FetchFinished();

            var oldValue = Registers.L;
            var newValue = (byte)(oldValue >> 1);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 8;
        }

        /// <summary>
        /// The SRL (HL) instruction
        /// </summary>
        private byte SRL_aHL()
        {
            FetchFinished();

            var address = (ushort)Registers.HL;
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 15;
        }

        /// <summary>
        /// The SRL (IX+n),A instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),B instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),C instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),D instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),E instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),H instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n),L instruction
        /// </summary>
        private byte SRL_aIX_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IX+n) instruction
        /// </summary>
        private byte SRL_aIX_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IX + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),A instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_A(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.A = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),B instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_B(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.B = newValue;

            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            var carry = (oldValue & 0b0000_0001) == 0 ? Bit.False : Bit.True;
            var overflow = (oldValue & 0b1000_0001) == 0 ? Bit.False : Bit.True;
            Registers.CF = carry;
            Registers.SF = overflow;
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),C instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_C(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.C = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),D instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_D(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.D = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),E instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_E(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.E = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),H instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_H(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.H = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n),L instruction
        /// </summary>
        private byte SRL_aIY_plus_n_and_load_L(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);
            Registers.L = newValue;

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }

        /// <summary>
        /// The SRL (IY+n) instruction
        /// </summary>
        private byte SRL_aIY_plus_n(byte offset)
        {
            FetchFinished();

            var address = (ushort)(Registers.IY + (SByte)offset);
            var oldValue = processorAgent.ReadFromMemory(address);
            var newValue = (byte)(oldValue >> 1);
            processorAgent.WriteToMemory(address, newValue);

            Registers.CF = oldValue.GetBit(0);
            Registers.HF = 0;
            Registers.NF = 0;
            Registers.SetFlags3and5From(newValue);
            Registers.SF = newValue.GetBit(7);
            Registers.ZF = newValue == 0;
            Registers.PF = Parity[newValue];

            return 23;
        }
    }
}