// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "RRD +           .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The RRD instruction.
        /// </summary>
        private byte RRD()
        {
            FetchFinished();

            var memoryAddress = (ushort)Registers.HL;

            var Avalue = Registers.A;
            var HLcontents = processorAgent.ReadFromMemory(memoryAddress);

            var newAvalue = (byte)((Avalue & 0xF0) | (HLcontents & 0x0F));
            var newHLcontents = (byte)(((HLcontents >> 4) & 0x0F) | ((Avalue << 4) & 0xF0));
            Registers.A = newAvalue;
            processorAgent.WriteToMemory(memoryAddress, newHLcontents);

            Registers.SF = newAvalue.GetBit(7);
            Registers.ZF = newAvalue == 0;
            Registers.HF = 0;
            Registers.PF = Parity[newAvalue];
            Registers.NF = 0;
            Registers.SetFlags3and5From(newAvalue);

            return 18;
        }

        /// <summary>
        /// The RLD instruction.
        /// </summary>
        private byte RLD()
        {
            FetchFinished();

            var memoryAddress = (ushort)Registers.HL;

            var Avalue = Registers.A;
            var HLcontents = processorAgent.ReadFromMemory(memoryAddress);

            var newAvalue = (byte)((Avalue & 0xF0) | ((HLcontents >> 4) & 0x0F));
            var newHLcontents = (byte)(((HLcontents << 4) & 0xF0) | (Avalue & 0x0F));
            Registers.A = newAvalue;
            processorAgent.WriteToMemory(memoryAddress, newHLcontents);

            Registers.SF = newAvalue.GetBit(7);
            Registers.ZF = newAvalue == 0;
            Registers.HF = 0;
            Registers.PF = Parity[newAvalue];
            Registers.NF = 0;
            Registers.SetFlags3and5From(newAvalue);

            return 18;
        }
    }
}