<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>


namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach(var src in new[] {"A","B","C","D","E","H","L", "IXH", "IXL", "IYH", "IYL"}) {
   foreach(var dest in new[] {"A","B","C","D","E","H","L", "IXH", "IXL", "IYH", "IYL"}) {
		if(IsInvalidCombination(dest, src)) continue; #>
        /// <summary>
        /// The LD <#=dest#>,<#=src#> instruction.
        /// </summary>
        byte LD_<#=dest#>_<#=src#>()
        {
            FetchFinished();

<# if(src != dest) { #>
            <#=Register(dest)#> = <#=Register(src)#>;

<# } #>
            return <#=src.Length==3 || dest.Length==3 ? 8 : 4#>;
        }

<# }} #>
    }
}
<#+
bool IsInvalidCombination(string dest, string src)
{
	var regs=dest+"_"+src;
	
	return (new[] {
		"IYH_H",
		"IXH_L",
		"IXL_L",
		"IYH_L",
		"IYL_L",
		"H_IXH",
		"L_IXH",
		"IXL_IXH",
		"IYH_IXH",
		"IYL_IXH",
		"H_IXL",
		"L_IXL",
		"IYH_IXL",
		"IYL_IXL",
		"H_IYH",
		"L_IYH",
		"IXH_IYH",
		"IXL_IYH",
		"IYL_IYH",
		"H_IYL",
		"L_IYL",
		"IXH_IYL",
		"IXL_IYL",
    }).Contains(regs);
}
#>
