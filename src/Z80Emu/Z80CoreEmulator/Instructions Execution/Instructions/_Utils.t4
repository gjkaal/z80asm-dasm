<#@ import namespace="System.IO" #>
<#+
string Register(string name)
{
	return "Registers." + name;
}

bool IsIndexRegister(string name)
{
	return (name.StartsWith("IX") || name.StartsWith("IY"));
}

object IfIndexRegister(string regName, object value, object @else)
{
    return regName.StartsWith("IX") || regName.StartsWith("IY") ? value : @else;
}

string MethodRegPartName(string reg, string destReg = "")
{
	var name =
		reg=="(IX+n)" ? "aIX_plus_n" :
		reg=="(IY+n)" ? "aIY_plus_n" :
		reg.StartsWith("(") ? "a" + reg.Substring(1,2) :
		reg;

    if(destReg != "")
        name += "_and_load_" + destReg;

    return name;
}

void AutoGeneratedCodeWarning()
{ #>// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "<#=Path.GetFileName(Host.TemplateFile)#>" instead.
<#+
}

void PopFromStack(string reg, bool isUshort = false)
{ #>
			var sp = (ushort)Registers.SP;
            var new<#=reg#> = NumberUtils.CreateShort(
                ProcessorAgent.ReadFromMemory(sp),
                ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
            Registers.<#=reg#> = <#=isUshort ? "(ushort)" : "" #>new<#=reg#>;

            Registers.SP += 2;
<#+
}

void PushToStack(string reg, bool isUshort = false)
{ #>
			var valueToPush = <#=isUshort ? "(short)" : "" #>Registers.<#=reg#>;
			var sp = (ushort)(Registers.SP - 1);
			ProcessorAgent.WriteToMemory(sp, valueToPush.GetHighByte());
			sp--;
			ProcessorAgent.WriteToMemory(sp, valueToPush.GetLowByte());
			Registers.SP = (short)sp;
<#+
}

void GetAddressFromReg(string reg)
{
	if (reg == "(IX+n)" || reg == "(IY+n)") { #>
			var address = (ushort)(Registers.<#=reg.Substring(1, 2) #> + (SByte)offset);
	<#+ } else if(reg.StartsWith("(")) { #>
			var address = (ushort)Registers.<#=reg.Substring(1,2)#>;
	<#+ } #>
<#+
}

void GetOldValueFromRegOrMem(string reg)
{ 
	if (reg == "(IX+n)" || reg == "(IY+n)") { #>
			var address = (ushort)(Registers.<#=reg.Substring(1, 2) #> + (SByte)offset);
			var oldValue = ProcessorAgent.ReadFromMemory(address);
	<#+ } else if(reg.StartsWith("(")) { #>
			var address = (ushort)Registers.<#=reg.Substring(1,2)#>;
			var oldValue = ProcessorAgent.ReadFromMemory(address);
    <#+ } else { #>
            var oldValue = Registers.<#=reg#>;
	<#+ } #>
<#+
}

void SetNewValueToRegOrMem(string reg)
{ 
    if(reg.StartsWith("(")) { #>
			ProcessorAgent.WriteToMemory(address, newValue);
    <#+ } else { #>
            Registers.<#=reg#> = newValue;
	<#+ } #>
<#+
}

void ReadOffset(string reg)
{
    if (reg.StartsWith("(I"))
    { #>
			var offset = ProcessorAgent.FetchNextOpcode();
<#+ 
	}
}

#>