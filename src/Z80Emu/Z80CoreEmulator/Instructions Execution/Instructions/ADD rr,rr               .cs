// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADD rr,rr               .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The ADD HL,BC instruction
        /// </summary>
        private byte ADD_HL_BC()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.BC;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 11;
        }

        /// <summary>
        /// The ADD HL,DE instruction
        /// </summary>
        private byte ADD_HL_DE()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.DE;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 11;
        }

        /// <summary>
        /// The ADD HL,HL instruction
        /// </summary>
        private byte ADD_HL_HL()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.HL;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 11;
        }

        /// <summary>
        /// The ADD HL,SP instruction
        /// </summary>
        private byte ADD_HL_SP()
        {
            FetchFinished();

            var oldValue = Registers.HL;
            var valueToAdd = Registers.SP;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.HL = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 11;
        }

        /// <summary>
        /// The ADD IX,BC instruction
        /// </summary>
        private byte ADD_IX_BC()
        {
            FetchFinished();

            var oldValue = Registers.IX;
            var valueToAdd = Registers.BC;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IX = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IX,DE instruction
        /// </summary>
        private byte ADD_IX_DE()
        {
            FetchFinished();

            var oldValue = Registers.IX;
            var valueToAdd = Registers.DE;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IX = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IX,IX instruction
        /// </summary>
        private byte ADD_IX_IX()
        {
            FetchFinished();

            var oldValue = Registers.IX;
            var valueToAdd = Registers.IX;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IX = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IX,SP instruction
        /// </summary>
        private byte ADD_IX_SP()
        {
            FetchFinished();

            var oldValue = Registers.IX;
            var valueToAdd = Registers.SP;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IX = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IY,BC instruction
        /// </summary>
        private byte ADD_IY_BC()
        {
            FetchFinished();

            var oldValue = Registers.IY;
            var valueToAdd = Registers.BC;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IY = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IY,DE instruction
        /// </summary>
        private byte ADD_IY_DE()
        {
            FetchFinished();

            var oldValue = Registers.IY;
            var valueToAdd = Registers.DE;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IY = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IY,IY instruction
        /// </summary>
        private byte ADD_IY_IY()
        {
            FetchFinished();

            var oldValue = Registers.IY;
            var valueToAdd = Registers.IY;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IY = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }

        /// <summary>
        /// The ADD IY,SP instruction
        /// </summary>
        private byte ADD_IY_SP()
        {
            FetchFinished();

            var oldValue = Registers.IY;
            var valueToAdd = Registers.SP;
            var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
            var newValue = (short)(newValueInt & 0xFFFF);
            Registers.IY = newValue;

            Registers.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
            Registers.CF = newValueInt & 0x10000;
            Registers.NF = 0;
            SetFlags3and5From(newValue.GetHighByte());

            return 15;
        }
    }
}