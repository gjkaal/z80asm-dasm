<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="_Utils.t4"#>
<#@ output extension=".cs" #>
<#AutoGeneratedCodeWarning();#>

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
<# foreach (var instr in new[] {"RRD", "RLD"})
{ #>
        /// <summary>
        /// The <#=instr#> instruction.
        /// </summary>
        byte <#=instr#>()
        {
            FetchFinished();

            var memoryAddress = (ushort)Registers.HL;

            var Avalue = Registers.A;
            var HLcontents = ProcessorAgent.ReadFromMemory(memoryAddress);

<# if (instr == "RRD") { #>
            var newAvalue = (byte)((Avalue & 0xF0) | (HLcontents & 0x0F));
            var newHLcontents = (byte)(((HLcontents >> 4) & 0x0F) | ((Avalue << 4) & 0xF0));
<# } else { #>
            var newAvalue = (byte)((Avalue & 0xF0) | ((HLcontents >> 4) & 0x0F));
            var newHLcontents = (byte)(((HLcontents << 4) & 0xF0) | (Avalue & 0x0F));
<# } #>
            Registers.A = newAvalue;
            ProcessorAgent.WriteToMemory(memoryAddress, newHLcontents);

            Registers.SF = newAvalue.GetBit(7);
            Registers.ZF = (newAvalue == 0);
            Registers.HF = 0;
            Registers.PF = Parity[newAvalue];
            Registers.NF = 0;
            Registers.SetFlags3and5From(newAvalue);

            return 18;
        }

<# } #>
    }
}
